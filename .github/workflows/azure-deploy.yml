name: Deploy to Azure Container Apps

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: jboardregistry
  CONTAINER_APP_NAME: jboard-py-ashby-extractor
  RESOURCE_GROUP: jboard-microservices
  CONTAINER_APP_ENVIRONMENT: jboard-environment
  IMAGE_NAME: jboard-py-ashby-extractor
  CRUD_CONTAINER_APP_NAME: jboard-go-crud

jobs:
  test-and-setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -m pytest test/ -v --cov=src --cov-report=html --cov-fail-under=90
      env:
        API_URL: "http://localhost:8080"
        API_TIMEOUT: "30"
        ASHBY_TIMEOUT: "5"
        COMPANIES: "test-company"
        DEFAULT_URL: "https://jobs.ashbyhq.com/"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test-and-setup
    if: ${{ success() }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

#    - name: Get CRUD URL
#      id: crud-url
#      run: |
#        CRUD_FQDN=$(az containerapp show \
#          --name ${{ env.CRUD_CONTAINER_APP_NAME }} \
#          --resource-group ${{ env.RESOURCE_GROUP }} \
#          --query "properties.configuration.ingress.fqdn" \
#          --output tsv)
#
#        echo "Raw CRUD FQDN result: '$CRUD_FQDN'"
#
#        if [ -z "$CRUD_FQDN" ] || [ "$CRUD_FQDN" = "null" ]; then
#          echo "Cannot deploy ashby-extractor without a valid CRUD URL"
#          exit 1
#        else
#          CRUD_URL="https://$CRUD_FQDN/v1"
#          echo "crud-url=$CRUD_URL" >> $GITHUB_OUTPUT
#        fi

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64

    - name: Deploy to Azure Container Apps
      id: deploy
      run: |
        az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
              COMPANIES="${{ secrets.COMPANIES }}" \
#              API_URL="${{ steps.crud-url.outputs.crud-url }}" \
              API_URL="http://jboard-go-crud" \
              DEFAULT_URL="${{ secrets.DEFAULT_URL }}" \
              API_TIMEOUT="${{ secrets.API_TIMEOUT }}" \
              ASHBY_TIMEOUT="${{ secrets.ASHBY_TIMEOUT }}"

    - name: Deployment Summary
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "# ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Python Ashby Extractor deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Container App: ${{ env.CONTAINER_APP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- CRUD Backend: ${{ steps.crud-url.outputs.crud-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Access: Internal only (no external access)" >> $GITHUB_STEP_SUMMARY
        else
          echo "# ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check which step failed
          if [ "${{ needs.test-and-setup.result }}" != "success" ]; then
            echo "🧪 **Tests Failed:** Check Python test failures and 90% coverage requirement" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.deploy.outcome }}" != "success" ]; then
            echo "🚀 **Deployment Failed:** Check Azure credentials, Container Registry access, and CRUD service availability" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔧 **Build Failed:** Check Docker build logs and Python dependencies" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 Fix the issue and push a new commit to retry deployment." >> $GITHUB_STEP_SUMMARY
        fi
