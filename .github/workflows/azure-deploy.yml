name: Job Extractor - Ashby - Azure Deploy

on:
  schedule:
    - cron: '0 6,18 * * *'  # Executa √†s 6h e 18h UTC (a cada 12h)
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: jboardregistry
  RESOURCE_GROUP: jboard-microservices-rg
  IMAGE_NAME: jboard-ashby-extractor

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      env:
        API_URL: "http://test-api:8080"
        API_TIMEOUT: "30"
        COMPANIES: "test-company"
        ASHBY_TIMEOUT: "30"
        DEFAULT_URL: "http://test-default:8080"
      run: |
        echo "üß™ Executando testes unit√°rios..."
        python -m pytest test/ -v --tb=short --cov-fail-under=90
        echo "‚úÖ Todos os testes passaram com cobertura >= 90%!"

    - name: Get Container Registry Name
      id: registry
      run: |
        # Verificar se o registry existe, caso contr√°rio usar um com sufixo
        if az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
          echo "registry_name=${{ env.AZURE_CONTAINER_REGISTRY }}" >> $GITHUB_OUTPUT
        else
          # Procurar registry com prefixo jboardregistry
          REGISTRY_NAME=$(az acr list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?starts_with(name, 'jboardregistry')].name" -o tsv | head -1)
          if [ -n "$REGISTRY_NAME" ]; then
            echo "registry_name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Nenhum Container Registry encontrado"
            exit 1
          fi
        fi

    - name: Build and push Docker image
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        REGISTRY_NAME="${{ steps.registry.outputs.registry_name }}"
        
        # Login to Azure Container Registry
        az acr login --name $REGISTRY_NAME
        
        # Build and push image with multi-stage optimization
        docker build \
          --build-arg TARGETARCH=amd64 \
          -t $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -t $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          .
        
        docker push $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
        echo "‚úÖ Imagem publicada: $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"

    - name: Run Job Extractor
      run: |
        REGISTRY_NAME="${{ steps.registry.outputs.registry_name }}"
        CONTAINER_GROUP_NAME="jboard-extractor-$(date +%Y%m%d-%H%M%S)"
        
        echo "üöÄ Executando extractor de jobs..."
        echo "   ‚Ä¢ Container: $CONTAINER_GROUP_NAME"
        echo "   ‚Ä¢ Imagem: $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        
        # Get ACR credentials
        echo "üîë Obtendo credenciais do Container Registry..."
        ACR_USERNAME=$(az acr credential show --name $REGISTRY_NAME --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show --name $REGISTRY_NAME --query passwords[0].value -o tsv)
        
        # Get Container App internal URL
        echo "üîç Descobrindo endpoint da API Container App..."
        API_FQDN=$(az containerapp show \
          --name jboard-go-crud \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn -o tsv 2>/dev/null || echo "")
        
        if [ -n "$API_FQDN" ]; then
          INTERNAL_API_URL="https://$API_FQDN/v1"
          echo "‚úÖ API descoberta: $INTERNAL_API_URL"
        else
          echo "‚ö†Ô∏è Container App n√£o encontrado, usando API_URL dos secrets"
          INTERNAL_API_URL="${{ secrets.API_URL }}"
        fi
        
        # Check if VNet exists and get available address space
        echo "üåê Verificando VNet e subnet para Container Instances..."
        VNET_INFO=$(az network vnet show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name jboard-vnet \
          --query "addressSpace.addressPrefixes[0]" -o tsv 2>/dev/null || echo "")
        
        if [ -z "$VNET_INFO" ]; then
          echo "‚ùå VNet jboard-vnet n√£o encontrada"
          exit 1
        fi
        
        # Check if subnet exists
        SUBNET_EXISTS=$(az network vnet subnet show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --vnet-name jboard-vnet \
          --name container-instances-subnet \
          --query name -o tsv 2>/dev/null || echo "")
        
        if [ -z "$SUBNET_EXISTS" ]; then
          echo "üì° Criando subnet dedicada para Container Instances..."
          # Try different address ranges to avoid conflicts
          for range in "10.0.10.0/24" "10.0.20.0/24" "10.0.30.0/24"; do
            if az network vnet subnet create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --vnet-name jboard-vnet \
              --name container-instances-subnet \
              --address-prefixes $range \
              --delegations Microsoft.ContainerInstance/containerGroups 2>/dev/null; then
              echo "‚úÖ Subnet criada com range $range"
              break
            else
              echo "‚ö†Ô∏è Range $range j√° em uso, tentando pr√≥ximo..."
            fi
          done
        else
          echo "‚úÖ Subnet container-instances-subnet j√° existe"
        fi
        
        # Run the container
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name $CONTAINER_GROUP_NAME \
          --image $REGISTRY_NAME.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          --registry-login-server $REGISTRY_NAME.azurecr.io \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --vnet jboard-vnet \
          --subnet container-instances-subnet \
          --environment-variables \
            COMPANIES="${{ secrets.COMPANIES }}" \
            API_URL="$INTERNAL_API_URL" \
            API_TIMEOUT="${{ secrets.API_TIMEOUT }}" \
            ASHBY_TIMEOUT="${{ secrets.ASHBY_TIMEOUT }}" \
            DEFAULT_URL="${{ secrets.DEFAULT_URL }}" \
          --restart-policy Never \
          --cpu 0.5 \
          --memory 1 \
          --os-type Linux \
          --location ${{ secrets.AZURE_LOCATION }}
        
        echo "‚è≥ Aguardando conclus√£o da execu√ß√£o..."
        
        # Wait for completion and get logs
        az container attach --resource-group ${{ env.RESOURCE_GROUP }} --name $CONTAINER_GROUP_NAME || true
        
        # Get final status
        STATUS=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name $CONTAINER_GROUP_NAME \
          --query instanceView.state \
          --output tsv)
        
        echo "üìä Status final do container: $STATUS"
        
        # Clean up - delete the container group
#        echo "üßπ Limpando container group..."
#        az container delete \
#          --resource-group ${{ env.RESOURCE_GROUP }} \
#          --name $CONTAINER_GROUP_NAME \
#          --yes

    - name: Show execution info
      run: |
        echo "üìã Informa√ß√µes da execu√ß√£o:"
        echo "   ‚Ä¢ Resource Group: ${{ env.RESOURCE_GROUP }}"
        echo "   ‚Ä¢ Imagem: ${{ steps.registry.outputs.registry_name }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        echo "   ‚Ä¢ Commit: ${{ github.sha }}"
